{"version":3,"sources":["App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["formatDuration","inputDuration","duration","Duration","fromObject","seconds","shiftTo","days","toFormat","hours","minutes","useStyles","makeStyles","theme","root","margin","spacing","marginLeft","marginRight","marginTop","outputText","fontSize","appStyles","addTimerButton","LocalStorageName","logAdjustment","x","Math","max","log","logSquaredAdjustment","E","logVal","sqrtAdjustment","sqrt","identityAdjustment","Timer","props","mult","classes","useState","defaultStartTime","startTime","setStartTime","DateTime","local","currentTime","setCurrentTime","defaultGranularity","granularity","setGranularity","defaultDivisor","divisor","setDivisor","toString","divisorText","setDivisorText","defaultTimerName","timerName","setTimerName","defaultAlgorithmStr","name","algorithmStr","setAlgorithmStr","algorithm","filter","alg","concat","waitedInterval","Interval","fromDateTimes","waitedSeconds","isValid","toDuration","useEffect","timer","setTimeout","Date","clearTimeout","onChange","newDivisor","parseInt","isNaN","isFinite","console","err","alert","toWaitSeconds","waitUntil","plus","Paper","className","TextField","label","value","e","target","DateTimePicker","disableFuture","openTo","FormControl","InputLabel","Select","MenuItem","type","Button","variant","onClick","color","startIcon","onClose","component","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","toLocaleString","DATETIME_MED","App","defaultTimerState","initState","localStorage","getItem","serialAppState","JSON","parse","Object","entries","timers","timerId","timerState","fromISO","0","appState","setAppState","setItem","stringify","onTimerChange","newDefault","newState","nextTimerId","keys","map","num","removeTimerId","CssBaseline","utils","LuxonUtils","newTimer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a6500c64.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport LuxonUtils from '@date-io/luxon';\nimport { DateTimePicker } from '@material-ui/pickers'\nimport { DateTime, Duration, Interval } from 'luxon';\nimport { Button, TextField, Select, MenuItem, FormControl, InputLabel, Paper, Radio, RadioGroup } from '@material-ui/core'\nimport { FormControlLabel, FormLabel } from '@material-ui/core'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction formatDuration(inputDuration) {\n  const duration = Duration.fromObject({ seconds: inputDuration }).shiftTo(\"days\", \"hours\", \"minutes\", \"seconds\");\n  if (duration.days > 0) {\n    return duration.toFormat(\"d 'days' h 'hours' m 'minutes' s 'seconds'\")\n  } else if (duration.hours > 0) {\n    return duration.toFormat(\"h 'hours' m 'minutes' s 'seconds'\")\n  } else if (duration.minutes > 0) {\n    return duration.toFormat(\"m 'minutes' s 'seconds'\")\n  } else {\n    return duration.toFormat(\"s 'seconds'\")\n  }\n  // const asMinutes = Math.trunc(durationSeconds / 60);\n  // const asHours = Math.trunc(asMinutes / 60);\n  // const days = Math.trunc(asHours / 24);\n\n  // const hours = asHours - 24 * days;\n  // const minutes = asMinutes - asHours * 60;\n  // const seconds = durationSeconds - asMinutes * 60;\n\n  // let result = `${seconds.toFixed(2)} seconds`;\n\n  // if (minutes > 0) {\n  //     result = `${minutes} minutes ${result}`;\n  // }\n\n  // if (hours > 0) {\n  //     result = `${hours} hours ${result}`;\n  // }\n\n  // if (days > 0) {\n  //     result = `${days} days ${result}`;\n  // }\n\n  // return result;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n    marginLeft: theme.spacing(4),\n    marginRight: theme.spacing(4),\n    marginTop: theme.spacing(4)\n  },\n  outputText: {\n    fontSize: '1rem'\n  }\n}));\n\nconst appStyles = makeStyles((theme) => ({\n  addTimerButton: {\n    marginLeft: theme.spacing(4),\n    marginRight: theme.spacing(4)\n  }\n}));\n\nconst LocalStorageName = 'timers';\n\nfunction logAdjustment(x) {\n  return x / Math.max(1, Math.log(x));\n}\n\nfunction logSquaredAdjustment(x) {\n  if (x < (Math.E * Math.E)) {\n    // This is the zero of the derivitive.\n    return x;\n  } else {\n    const logVal = Math.log(x);\n    return x / (logVal * logVal);\n  }\n}\n\nfunction sqrtAdjustment(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nfunction identityAdjustment(x) {\n  return Math.max(x, 0);\n}\n\nfunction Timer(props) {\n  const classes = useStyles();\n\n  const [startTime, setStartTime] = useState(props.defaultStartTime);\n  const [currentTime, setCurrentTime] = useState(DateTime.local());\n\n  const [granularity, setGranularity] = useState(props.defaultGranularity);\n  const [divisor, setDivisor] = useState(props.defaultDivisor);\n  const [divisorText, setDivisorText] = useState(divisor.toString());\n\n  const [timerName, setTimerName] = useState(props.defaultTimerName);\n\n  const [algorithmStr, setAlgorithmStr] = useState(props.defaultAlgorithmStr || logAdjustment.name);\n  const algorithms = [logAdjustment, logSquaredAdjustment, sqrtAdjustment, identityAdjustment]\n  const algorithm = algorithms.filter(alg => alg.name === algorithmStr).concat(logAdjustment.name)[0];\n\n  const waitedInterval = Interval.fromDateTimes(startTime, currentTime);\n  const waitedSeconds = waitedInterval.isValid ? waitedInterval.toDuration().shiftTo('seconds').seconds : 0;\n\n  useEffect(() => {\n    const timer = setTimeout(() => setCurrentTime(new Date()), 1000);\n    return () => clearTimeout(timer);\n  });\n\n  useEffect(() => {\n    props.onChange({\n      startTime,\n      granularity,\n      divisor,\n      timerName,\n      algorithmStr\n    });\n  }, [startTime, granularity, divisor, timerName, algorithmStr]);\n\n  useEffect(() => {\n    try {\n      const newDivisor = parseInt(divisorText);\n      if (!isNaN(newDivisor) && isFinite(newDivisor) && newDivisor > 0) {\n        setDivisor(newDivisor);\n      } else {\n        console.log('Not updating to invalid divisor [%o].', newDivisor);\n      }\n    } catch (err) {\n      console.log('Not updating divisor to non-number [%o] due to exception. %o', divisorText, err);\n    }\n  }, [divisorText])\n\n  let mult;\n  switch (granularity) {\n    case \"seconds\":\n      mult = 1;\n      break;\n    case \"minutes\":\n      mult = 60;\n      break;\n    case \"hours\":\n      mult = 60 * 60;\n      break;\n    default:\n      console.log(granularity);\n      alert(`Error, invalid granularity: ${granularity}`);\n  }\n\n  const timeUnits = waitedSeconds / mult;\n  const dividedUnits = timeUnits / divisor;\n  const toWaitUnits = algorithm(dividedUnits);\n  const toWaitSeconds = toWaitUnits * divisor * mult;\n\n  const waitUntil = DateTime.local().plus(Duration.fromObject({ seconds: toWaitSeconds }));\n\n  return (\n    <Paper className={classes.root}>\n      <TextField label=\"Timer name\" value={timerName} onChange={e => setTimerName(e.target.value)} />\n      <DateTimePicker label=\"Start time\" value={startTime} onChange={setStartTime} disableFuture={true} openTo=\"hours\" />\n      {/* <input type=\"time\" onChange={updateStartTime} value={dateToTimeInput(startTime)} /> */}\n      <FormControl>\n        <InputLabel>Granularity</InputLabel>\n        <Select value={granularity} onChange={e => setGranularity(e.target.value)}>\n          <MenuItem value=\"seconds\">seconds</MenuItem>\n          <MenuItem value=\"minutes\">minutes</MenuItem>\n          <MenuItem value=\"hours\">hours</MenuItem>\n        </Select>\n      </FormControl>\n      <TextField type=\"number\" label=\"Divisor\" value={divisorText} onChange={e => setDivisorText(e.target.value)} />\n      <Button variant=\"contained\" onClick={() => setStartTime(DateTime.local())} color=\"primary\" startIcon={<RefreshIcon />}>Now</Button>\n      <Button variant=\"contained\" onClick={props.onClose} color=\"secondary\" startIcon={<DeleteIcon />}>Delete</Button>\n      <div>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Wait Algorithm</FormLabel>\n          <RadioGroup row value={algorithmStr} onChange={e => setAlgorithmStr(e.target.value)}>\n            <FormControlLabel value={logAdjustment.name} control={<Radio color=\"primary\" />} label=\"Log\" />\n            <FormControlLabel value={logSquaredAdjustment.name} control={<Radio color=\"primary\" />} label=\"Log²\" />\n            <FormControlLabel value={sqrtAdjustment.name} control={<Radio color=\"primary\" />} label=\"Square Root\" />\n            <FormControlLabel value={identityAdjustment.name} control={<Radio color=\"primary\" />} label=\"Identity\" />\n          </RadioGroup>\n        </FormControl>\n      </div>\n      <div className={classes.outputText}>\n        <p>Time Waited: {formatDuration(waitedSeconds)}</p>\n        <p>Time to Wait: {formatDuration(toWaitSeconds)}</p>\n        <p>Wait Until: {waitUntil.toLocaleString(DateTime.DATETIME_MED)}</p>\n      </div>\n    </Paper>\n  );\n}\n\nfunction App() {\n  const classes = appStyles();\n\n  const defaultTimerState = () => {\n    return {\n      defaultStartTime: DateTime.local(),\n      defaultGranularity: 'minutes',\n      defaultDivisor: 1,\n      defaultTimerName: ''\n    };\n  };\n\n  const [appState, setAppState] = useState(() => {\n    const initState = localStorage.getItem(LocalStorageName);\n    if (initState) {\n      const serialAppState = JSON.parse(initState);\n      for (let [timerId, timerState] of Object.entries(serialAppState.timers)) {\n        serialAppState.timers[timerId] = {\n          ...timerState,\n          defaultStartTime: DateTime.fromISO(timerState.defaultStartTime)\n        }\n      }\n\n      return serialAppState;\n    } else {\n      return {\n        timers: {\n          0: defaultTimerState()\n        }\n      };\n    }\n  });\n  useEffect(() => {\n    const serialAppState = {\n      ...appState\n    }\n    serialAppState.timers = {};\n    for (let [timerId, timerState] of Object.entries(appState.timers)) {\n      serialAppState.timers[timerId] = {\n        ...timerState,\n        defaultStartTime: DateTime.fromISO(timerState.defaultStartTime)\n      }\n    }\n    localStorage.setItem(LocalStorageName, JSON.stringify(serialAppState));\n  }, [appState]);\n\n  const onTimerChange = timerId => timerState => {\n    const newDefault = {\n      defaultStartTime: timerState.startTime,\n      defaultGranularity: timerState.granularity,\n      defaultDivisor: timerState.divisor,\n      defaultTimerName: timerState.timerName,\n      defaultAlgorithmStr: timerState.algorithmStr\n    };\n    const newState = {\n      ...appState,\n      timers: {\n        ...appState.timers,\n        [timerId]: newDefault\n      }\n    };\n    setAppState(newState);\n  };\n\n  const nextTimerId = Math.max(...Object.keys(appState.timers).map((num) => parseInt(num)).concat(-1)) + 1;\n\n  const addTimer = () => {\n    const newTimer = defaultTimerState();\n    const newState = {\n      ...appState,\n      timers: {\n        ...appState.timers,\n        [nextTimerId]: newTimer\n      }\n    };\n    setAppState(newState);\n  };\n\n  const removeTimerId = timerId => () => {\n    const newState = {\n      ...appState,\n      timers: {\n        ...appState.timers\n      }\n    }\n    delete newState.timers[timerId];\n    setAppState(newState);\n  };\n\n  const timers = Object.entries(appState.timers).map(([timerId, timerState]) => {\n    return (<Timer onChange={onTimerChange(timerId)} onClose={removeTimerId(timerId)} key={timerId} {...timerState} />);\n  });\n\n  return (\n    <div>\n      <CssBaseline />\n      <MuiPickersUtilsProvider utils={LuxonUtils}>\n        {timers}\n        <Button variant=\"contained\" color=\"primary\" onClick={addTimer} className={classes.addTimerButton}>Add Timer</Button>\n      </MuiPickersUtilsProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n// These are according to\nimport 'fontsource-roboto/300.css';\nimport 'fontsource-roboto/400.css';\nimport 'fontsource-roboto/500.css';\nimport 'fontsource-roboto/700.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}